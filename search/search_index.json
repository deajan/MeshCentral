{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MeshCentral Documentation \u00b6 About \u00b6 MeshCentral is a full computer management web site. With MeshCentral, you can run your own web server to remotely manage and control computers on a local network or anywhere on the internet. Once you get the server started, create device group and download and install an agent on each computer you want to manage. A minute later, the new computer will show up on the web site and you can take control of it. MeshCentral includes full web-based remote desktop, terminal and file management capability. To try out this software on the public server, please visit MeshCentral.com/login . Be mindful that the public MeshCentral server comes with no guaranties, most should setup their own server. For more information, visit MeshCentral.com . Social Media \u00b6 YouTube Reddit Twitter BlogSpot Documentation \u00b6 The User's Guide contains information every adminstrator should know including usage, the server configuration file, databases, TLS offloading, Lets Encrypt, IP Filtering, Email setup, embedding, server port aliasing, reverse proxy setup, multi factor authentication, branding & terms of use, HashiCorp Vault support, and SSO. The Installation Guide has detailed instructions for installing the MeshCentral Server on Windows 8.1, Windows 10, Windows 2012 R2, Amazon Linux 2, Raspberry Pi, Microsoft Azure, Google Cloud, Ubuntu 18, Ubuntu 16 and OpenBSD. The Design and Architecture Guide is a short document that includes information on the design overview, dependencies, source code descriptions of each file, certificates, TLS security, the agent to server handshake, browser to agent relay and WebRTC and the messenger service. Video Tutorials \u00b6 You can watch many tutorial videos on the MeshCentral YouTube Channel . Two videos to get started involve installation and basic usages. Installing MeshCentral on Windows, Linux and macOS. MeshCentral - Installation Basic Usages including installing the agent and remote desktop, terminal and file access. MeshCentral - Basics MeshCentral support for two-factor authentication. MeshCentral - Two Factor Authentication How to setup MeshCentral with the NGINX reverse proxy. MeshCentral - NGINX Reverse Proxy Installing and using the MeshCentral Android agent. MeshCentral - Android Using MeshCentral Router to port map TCP connections. MeshCentral - Basics Feedback \u00b6 If you encounter a problem or have a suggestion to improve the product, you may file an issue report If you are filing a problem report, you should include: The version of the software you are using The Operating System and version The observed output The expected output Any troubleshooting you took to resolve the issue yourself Any other similar reports~~ If you are having issues with the following other products, you should file a report on their respective issue pages MeshAgent MeshRouter License This software is licensed under Apache 2.0 .","title":"Home"},{"location":"#meshcentral-documentation","text":"","title":"MeshCentral Documentation"},{"location":"#about","text":"MeshCentral is a full computer management web site. With MeshCentral, you can run your own web server to remotely manage and control computers on a local network or anywhere on the internet. Once you get the server started, create device group and download and install an agent on each computer you want to manage. A minute later, the new computer will show up on the web site and you can take control of it. MeshCentral includes full web-based remote desktop, terminal and file management capability. To try out this software on the public server, please visit MeshCentral.com/login . Be mindful that the public MeshCentral server comes with no guaranties, most should setup their own server. For more information, visit MeshCentral.com .","title":"About"},{"location":"#social-media","text":"YouTube Reddit Twitter BlogSpot","title":"Social Media"},{"location":"#documentation","text":"The User's Guide contains information every adminstrator should know including usage, the server configuration file, databases, TLS offloading, Lets Encrypt, IP Filtering, Email setup, embedding, server port aliasing, reverse proxy setup, multi factor authentication, branding & terms of use, HashiCorp Vault support, and SSO. The Installation Guide has detailed instructions for installing the MeshCentral Server on Windows 8.1, Windows 10, Windows 2012 R2, Amazon Linux 2, Raspberry Pi, Microsoft Azure, Google Cloud, Ubuntu 18, Ubuntu 16 and OpenBSD. The Design and Architecture Guide is a short document that includes information on the design overview, dependencies, source code descriptions of each file, certificates, TLS security, the agent to server handshake, browser to agent relay and WebRTC and the messenger service.","title":"Documentation"},{"location":"#video-tutorials","text":"You can watch many tutorial videos on the MeshCentral YouTube Channel . Two videos to get started involve installation and basic usages. Installing MeshCentral on Windows, Linux and macOS. MeshCentral - Installation Basic Usages including installing the agent and remote desktop, terminal and file access. MeshCentral - Basics MeshCentral support for two-factor authentication. MeshCentral - Two Factor Authentication How to setup MeshCentral with the NGINX reverse proxy. MeshCentral - NGINX Reverse Proxy Installing and using the MeshCentral Android agent. MeshCentral - Android Using MeshCentral Router to port map TCP connections. MeshCentral - Basics","title":"Video Tutorials"},{"location":"#feedback","text":"If you encounter a problem or have a suggestion to improve the product, you may file an issue report If you are filing a problem report, you should include: The version of the software you are using The Operating System and version The observed output The expected output Any troubleshooting you took to resolve the issue yourself Any other similar reports~~ If you are having issues with the following other products, you should file a report on their respective issue pages MeshAgent MeshRouter License This software is licensed under Apache 2.0 .","title":"Feedback"},{"location":"downloads/","text":"","title":"Downloads"},{"location":"design/","text":"Design and Architecture \u00b6 Design and Architecture Guide Video Walkthru \u00b6","title":"Design and Architecture"},{"location":"design/#design-and-architecture","text":"Design and Architecture Guide","title":"Design and Architecture"},{"location":"design/#video-walkthru","text":"","title":"Video Walkthru"},{"location":"install/","text":"Installation \u00b6 Getting started is easy. If you don't have it already, install NodeJS. Then, create an empty folder and do this: npm install meshcentral node node_modules/meshcentral That's it. MeshCentral will set itself up and start managing computers on your local network. By default it will be setup in LAN mode and agents you install will multicast on the local network to find the server. To setup the server so that agents use a well known DNS name and to start customizing your server, go in the \"meshcentral-data\" folder and edit the config.json file. The configuration file must be valid JSON, you can use this link to validate the file format. For Windows users, you can download the MeshCentral Installer that will automate installation of NodeJS and provide basic configuration of the server. This option is not recommended for advanced users. Win32 MeshCentral Installer By default, MeshCentral will use NeDB as this is the built-in database. For more advanced users, it's recommended to switch to using MongoDB. MeshCentral can be installed on a very small server. A Raspberry Pi or AWS t3.nano running Amazon Linux 2 instance for 5$ a month will do just fine for managing up to a few hundred devices. You can run the MeshCentral Server with --help to get options for background installation. Configuration \u00b6 Once you get MeshCentral installed, the first user account that is created will be the server administrator. So, don't delay and navigate to the login page and create a new account. You can then start using your server right away. A lot of the fun with MeshCentral is the 100's of configuration options that are available in the config.json file. You can put your own branding on the web pages, setup a STMP email server, SMS services and much more. You can look here for simple config.json , here for a more advanced configuration and here for all possible configuration options . You can also take a look at the MeshCentral User's Guide and tutorial videos for additional help.","title":"Installation"},{"location":"install/#installation","text":"Getting started is easy. If you don't have it already, install NodeJS. Then, create an empty folder and do this: npm install meshcentral node node_modules/meshcentral That's it. MeshCentral will set itself up and start managing computers on your local network. By default it will be setup in LAN mode and agents you install will multicast on the local network to find the server. To setup the server so that agents use a well known DNS name and to start customizing your server, go in the \"meshcentral-data\" folder and edit the config.json file. The configuration file must be valid JSON, you can use this link to validate the file format. For Windows users, you can download the MeshCentral Installer that will automate installation of NodeJS and provide basic configuration of the server. This option is not recommended for advanced users. Win32 MeshCentral Installer By default, MeshCentral will use NeDB as this is the built-in database. For more advanced users, it's recommended to switch to using MongoDB. MeshCentral can be installed on a very small server. A Raspberry Pi or AWS t3.nano running Amazon Linux 2 instance for 5$ a month will do just fine for managing up to a few hundred devices. You can run the MeshCentral Server with --help to get options for background installation.","title":"Installation"},{"location":"install/#configuration","text":"Once you get MeshCentral installed, the first user account that is created will be the server administrator. So, don't delay and navigate to the login page and create a new account. You can then start using your server right away. A lot of the fun with MeshCentral is the 100's of configuration options that are available in the config.json file. You can put your own branding on the web pages, setup a STMP email server, SMS services and much more. You can look here for simple config.json , here for a more advanced configuration and here for all possible configuration options . You can also take a look at the MeshCentral User's Guide and tutorial videos for additional help.","title":"Configuration"},{"location":"intelamt/","text":"Intel AMT \u00b6 Intel AMT Guide Video Walkthru \u00b6","title":"Intel AMT"},{"location":"intelamt/#intel-amt","text":"Intel AMT Guide","title":"Intel AMT"},{"location":"intelamt/#video-walkthru","text":"","title":"Video Walkthru"},{"location":"meshcentral/","text":"Meshcentral2 Guide \u00b6 MeshCentral2 Guide Video Walkthru \u00b6","title":"Index"},{"location":"meshcentral/#meshcentral2-guide","text":"MeshCentral2 Guide","title":"Meshcentral2 Guide"},{"location":"meshcentral/#video-walkthru","text":"","title":"Video Walkthru"},{"location":"meshcentral/assistant/","text":"MeshCentral Assistant \u00b6 Initial Setup \u00b6 Agent Invite Code \u00b6 \"domains\" : { \"\" : { \"agentInviteCodes\" : true } } Agent Invitation Link \u00b6 For web page customization: Alongside meshcentral-data create a folder called meshcentral-web Create a views folder in it and copy the file node_modules/meshcentral/views/invite.handlebars into it. That copy will be served instead of the default one, you can customize as you want.","title":"Assistant"},{"location":"meshcentral/assistant/#meshcentral-assistant","text":"","title":"MeshCentral Assistant"},{"location":"meshcentral/assistant/#initial-setup","text":"","title":"Initial Setup"},{"location":"meshcentral/assistant/#agent-invite-code","text":"\"domains\" : { \"\" : { \"agentInviteCodes\" : true } }","title":"Agent Invite Code"},{"location":"meshcentral/assistant/#agent-invitation-link","text":"For web page customization: Alongside meshcentral-data create a folder called meshcentral-web Create a views folder in it and copy the file node_modules/meshcentral/views/invite.handlebars into it. That copy will be served instead of the default one, you can customize as you want.","title":"Agent Invitation Link"},{"location":"meshcentral/debugging/","text":"Websockets Video \u00b6 Enabling trace in your browser Dev Tools \u00b6 Trace=1 as a parameter in chrome dev tools for debugging To log all database queries, change log_statement in /etc/postgresql/13/main/postgresql.conf # CUSTOM log_statement = 'all' # none, ddl, mod, all The stacktrace was logged to stdout/journalctl . Supposedly, you can enable debug logging for node modules by adding DEBUG=<modulename> to the environment. Adding this to /etc/systemd/system/meshcentral.service should do it but it didn't seem to do anything. I think that's because Mesh uses the trace logging in the browser instead of logging things in the server logs. Environment=DEBUG=mesh* If you want to change node to meshcentral in journalctl, add this to /etc/systemd/system/meshcentral.service. SyslogIdentifier=meshcentral Server: Logging it all \u00b6 To log everything that's possible, prepare the log directory. mkdir /meshcentral/meshcentral-logs/ chown tactical:tactical logs ln -s ../meshcentral-logs/log.txt /meshcentral/meshcentral-data/log.txt And then add this to your config. \"meshErrorLogPath\" : \"/meshcentral/meshcentral-logs/\" , \"authLog\" : \"/meshcentral/meshcentral-logs/auth.log\" , \"log\" : [ \"cookie\" , \"dispatch\" , \"main\" , \"peer\" , \"web\" , \"webrequest\" , \"relay\" , \"webrelaydata\" , \"webrelay\" , \"mps\" , \"mpscmd\" , \"swarm\" , \"swarmcmd\" , \"agentupdate\" , \"agent\" , \"cert\" , \"db\" , \"email\" , \"amt\" , \"httpheaders\" , \"websocket\" ], You'll then have 3 files: -rw-rw-r-- 1 tactical tactical 2593 Feb 2 12 :22 auth.log -rw-r--r-- 1 tactical tactical 147593 Feb 2 12 :31 log.txt -rw-rw-r-- 1 tactical tactical 381 Feb 2 12 :02 mesherrors.txt And to make it truly log everything, change the following in meshcentral.js around line 3530. Old: obj.fs.writeSync(obj.xxLogFile, new Date().toLocaleTimeString() + ' - ' + source + ': ' + Array.prototype.slice.call(...args).join('') + '\\r\\n'); New: obj.fs.writeSync(obj.xxLogFile, new Date().toLocaleTimeString() + ' - ' + source + ': ' + args.join(' ') + '\\r\\n'); log.txt will now log everything in the Trace tab, but not formatted as nice. Restricting server to specific IP(s) \u00b6 When doing debugging on my development server, I use this line in the settings section to block all agent connections except the agent I want: \"agentAllowedIp\": [ \"192.168.2.147\" ], Of course, this is just for debugging. Finding system ID types \u00b6 https://serverurl/meshagents aka trying figure out what this is General server statistics related \u00b6","title":"Debugging"},{"location":"meshcentral/debugging/#websockets-video","text":"","title":"Websockets Video"},{"location":"meshcentral/debugging/#enabling-trace-in-your-browser-dev-tools","text":"Trace=1 as a parameter in chrome dev tools for debugging To log all database queries, change log_statement in /etc/postgresql/13/main/postgresql.conf # CUSTOM log_statement = 'all' # none, ddl, mod, all The stacktrace was logged to stdout/journalctl . Supposedly, you can enable debug logging for node modules by adding DEBUG=<modulename> to the environment. Adding this to /etc/systemd/system/meshcentral.service should do it but it didn't seem to do anything. I think that's because Mesh uses the trace logging in the browser instead of logging things in the server logs. Environment=DEBUG=mesh* If you want to change node to meshcentral in journalctl, add this to /etc/systemd/system/meshcentral.service. SyslogIdentifier=meshcentral","title":"Enabling trace in your browser Dev Tools"},{"location":"meshcentral/debugging/#server-logging-it-all","text":"To log everything that's possible, prepare the log directory. mkdir /meshcentral/meshcentral-logs/ chown tactical:tactical logs ln -s ../meshcentral-logs/log.txt /meshcentral/meshcentral-data/log.txt And then add this to your config. \"meshErrorLogPath\" : \"/meshcentral/meshcentral-logs/\" , \"authLog\" : \"/meshcentral/meshcentral-logs/auth.log\" , \"log\" : [ \"cookie\" , \"dispatch\" , \"main\" , \"peer\" , \"web\" , \"webrequest\" , \"relay\" , \"webrelaydata\" , \"webrelay\" , \"mps\" , \"mpscmd\" , \"swarm\" , \"swarmcmd\" , \"agentupdate\" , \"agent\" , \"cert\" , \"db\" , \"email\" , \"amt\" , \"httpheaders\" , \"websocket\" ], You'll then have 3 files: -rw-rw-r-- 1 tactical tactical 2593 Feb 2 12 :22 auth.log -rw-r--r-- 1 tactical tactical 147593 Feb 2 12 :31 log.txt -rw-rw-r-- 1 tactical tactical 381 Feb 2 12 :02 mesherrors.txt And to make it truly log everything, change the following in meshcentral.js around line 3530. Old: obj.fs.writeSync(obj.xxLogFile, new Date().toLocaleTimeString() + ' - ' + source + ': ' + Array.prototype.slice.call(...args).join('') + '\\r\\n'); New: obj.fs.writeSync(obj.xxLogFile, new Date().toLocaleTimeString() + ' - ' + source + ': ' + args.join(' ') + '\\r\\n'); log.txt will now log everything in the Trace tab, but not formatted as nice.","title":"Server: Logging it all"},{"location":"meshcentral/debugging/#restricting-server-to-specific-ips","text":"When doing debugging on my development server, I use this line in the settings section to block all agent connections except the agent I want: \"agentAllowedIp\": [ \"192.168.2.147\" ], Of course, this is just for debugging.","title":"Restricting server to specific IP(s)"},{"location":"meshcentral/debugging/#finding-system-id-types","text":"https://serverurl/meshagents aka trying figure out what this is","title":"Finding system ID types"},{"location":"meshcentral/debugging/#general-server-statistics-related","text":"","title":"General server statistics related"},{"location":"meshcentral/tokens/","text":"14.1 Tokens \u00b6 User Tokens \u00b6 Software Integration Tokens \u00b6 Currently, the login tokens in the user manual section 14.1 can't be tracked, deleted or revoked. They are generated with: node meshcentral --loginTokenKey","title":"Tokens"},{"location":"meshcentral/tokens/#141-tokens","text":"","title":"14.1 Tokens"},{"location":"meshcentral/tokens/#user-tokens","text":"","title":"User Tokens"},{"location":"meshcentral/tokens/#software-integration-tokens","text":"Currently, the login tokens in the user manual section 14.1 can't be tracked, deleted or revoked. They are generated with: node meshcentral --loginTokenKey","title":"Software Integration Tokens"},{"location":"meshcmd/","text":"MeshCmd \u00b6 MeshCmd Command Line Tool Video Walkthru \u00b6","title":"MeshCmd"},{"location":"meshcmd/#meshcmd","text":"MeshCmd Command Line Tool","title":"MeshCmd"},{"location":"meshcmd/#video-walkthru","text":"","title":"Video Walkthru"},{"location":"meshctrl/","text":"MeshCtrl \u00b6 MeshCtrl Command Line Tool Video Walkthru \u00b6","title":"MeshCtrl"},{"location":"meshctrl/#meshctrl","text":"MeshCtrl Command Line Tool","title":"MeshCtrl"},{"location":"meshctrl/#video-walkthru","text":"","title":"Video Walkthru"},{"location":"meshrouter/","text":"MeshCentral Router \u00b6 MeshCentral Router Guide Video Walkthru \u00b6 Downloading \u00b6 MeshCentral router is a Windows application that comes built-into the MeshCentral server or can be downloaded at: http://info.meshcentral.com/downloads/MeshCentral2/MeshCentralRouter.exe It\u2019s probably best to use the MeshCentral router that comes with your version of the MeshCentral server as the two will likely be most compatible. A given MeshCentral Router version may not work with any MeshCentral server versions. On MeshCentral, you can download MeshCentral Router with this link: The router link will only show up on Windows browsers. Login \u00b6 MeshCentral router will need to login to your MeshCentral server just like any browser. You can do this by entering the server name and account username and password. Depending on your server and account situation, you may see some or all of the following screens. If the second factor authentication is required, MeshCentral Router does not support hardware keys (WebAuthn), but does support the YubiKey\u2122 OTP. Creating Port Maps \u00b6 Once logged in, you can start adding port maps using the \u201cAdd Map\u2026\u201d and \u201cAdd Relay Map\u2026\u201d buttons on the bottom right. You can then create a map and open the associated application using the \u201cOpen\u2026\u201d button and remote to port map using the \u201cRemove\u201d button. There are two different types of ports mappings. A normal port map and a relay port map. A normal port map will route packets to the selected destination computer that is running the mesh agent as shown here. A relay port map will route traffic thru the server and thru the remote agent to a target IP address on the remote agent\u2019s network as shown here. Note that all traffic is encrypted using TLS from MeshCentral Router to the MeshCentral server and from the server to the MeshAgent. The server and the agent do have access the traffic so it\u2019s recommended to use port mappings to tunnel data that is also encrypted for that end-to-end encryption is assured. Custom Apps \u00b6 Starting v1.0.21 Command Line Arguments \u00b6 MeshCentral router can be run with command line arguments to make it quicker and easier to use. The arguments range from debugging to being able to quickly login and setting up port maps. -debug Causes MeshCentral Router to generate a \u201cdebug.log\u201d dump file that can be useful for debugging. -host:<hostname> -user:<username> -pass:<password> -ignorecert This set of command line arguments make logging into the MeshCentral server easier. Note that specifying the password using a command line argument may not be secure as the command shell can record the password in the command history. The \u201cignorecert\u201d argument is not recommended as it\u2019s going to cause MeshCentral Router to ignore untrusted server certificates. This should only be used for debugging. -map:<protocol>:<localport>:<computername>:<app>:<remoteport> The \u201cmap\u201d argument will automatically create a network map once MeshCentral Router is logged In. The protocol must be \u201cTCP\u201d or \u201cUDP, the local port can be 0 for any. The computer name is the server-side name of the computer, if many computers have the same one, one of them will be selected. The app can be empty for a custom application, or can be \u201cHTTP\u201d, \u201cHTTPS\u201d, \u201cRDP\u201d, \u201cPuTTY\u201d or \u201cWinSCP\u201d. For the UDP protocol, no apps are currently supported so it should be left blank. For example you can use: -map:TCP:0: \"MyComputer\" :HTTP:80 -map:UDP:1235: \"MyComputer\" ::1234 The first example will map a random local port to port 80 of \u201cMyComputer\u201d and is expected for use with HTTP traffic. The second example maps local UDP port 1235 to port 1234 on \u201cMyComputer\u201d. It\u2019s best for the computer name to be in quotes. In addition to port mapping, you can also setup relay maps where a remote computer is used as a traffic relay like this: -relaymap:<protocol>:<localport>:<computername> :<app>:<remoteip>:<remoteport> This will relays a local port to thru the server and thru a remote agent to a target IP address and port. For example: -relaymap:TCP:555: \"MyComputer\" :HTTP:192.168.1.1:80 This will relay local port 555 to a 192.168.1.1:80 for HTTP traffic. A typical use of this is to be able to remotely configure a home router from anywhere on the Internet. -all The \u201call\u201d switch will bind local ports to all network interfaces so that other computers on the network can use the port maps provided by MeshCentral Router. By default, local ports will be bound to the loopback interface so that only local application can use the port mappings. -tray The \u201ctray\u201d switch will place MeshCentral Router on the Windows system tray instead of the normal application bar. Conclusion \u00b6 MeshCentral, MeshCentral Router and this document are all opens source and licensed using Apache 2.0, the full license can be found at https://www.apache.org/licenses/LICENSE-2.0 .","title":"MeshCentral Router"},{"location":"meshrouter/#meshcentral-router","text":"MeshCentral Router Guide","title":"MeshCentral Router"},{"location":"meshrouter/#video-walkthru","text":"","title":"Video Walkthru"},{"location":"meshrouter/#downloading","text":"MeshCentral router is a Windows application that comes built-into the MeshCentral server or can be downloaded at: http://info.meshcentral.com/downloads/MeshCentral2/MeshCentralRouter.exe It\u2019s probably best to use the MeshCentral router that comes with your version of the MeshCentral server as the two will likely be most compatible. A given MeshCentral Router version may not work with any MeshCentral server versions. On MeshCentral, you can download MeshCentral Router with this link: The router link will only show up on Windows browsers.","title":"Downloading"},{"location":"meshrouter/#login","text":"MeshCentral router will need to login to your MeshCentral server just like any browser. You can do this by entering the server name and account username and password. Depending on your server and account situation, you may see some or all of the following screens. If the second factor authentication is required, MeshCentral Router does not support hardware keys (WebAuthn), but does support the YubiKey\u2122 OTP.","title":"Login"},{"location":"meshrouter/#creating-port-maps","text":"Once logged in, you can start adding port maps using the \u201cAdd Map\u2026\u201d and \u201cAdd Relay Map\u2026\u201d buttons on the bottom right. You can then create a map and open the associated application using the \u201cOpen\u2026\u201d button and remote to port map using the \u201cRemove\u201d button. There are two different types of ports mappings. A normal port map and a relay port map. A normal port map will route packets to the selected destination computer that is running the mesh agent as shown here. A relay port map will route traffic thru the server and thru the remote agent to a target IP address on the remote agent\u2019s network as shown here. Note that all traffic is encrypted using TLS from MeshCentral Router to the MeshCentral server and from the server to the MeshAgent. The server and the agent do have access the traffic so it\u2019s recommended to use port mappings to tunnel data that is also encrypted for that end-to-end encryption is assured.","title":"Creating Port Maps"},{"location":"meshrouter/#custom-apps","text":"Starting v1.0.21","title":"Custom Apps"},{"location":"meshrouter/#command-line-arguments","text":"MeshCentral router can be run with command line arguments to make it quicker and easier to use. The arguments range from debugging to being able to quickly login and setting up port maps. -debug Causes MeshCentral Router to generate a \u201cdebug.log\u201d dump file that can be useful for debugging. -host:<hostname> -user:<username> -pass:<password> -ignorecert This set of command line arguments make logging into the MeshCentral server easier. Note that specifying the password using a command line argument may not be secure as the command shell can record the password in the command history. The \u201cignorecert\u201d argument is not recommended as it\u2019s going to cause MeshCentral Router to ignore untrusted server certificates. This should only be used for debugging. -map:<protocol>:<localport>:<computername>:<app>:<remoteport> The \u201cmap\u201d argument will automatically create a network map once MeshCentral Router is logged In. The protocol must be \u201cTCP\u201d or \u201cUDP, the local port can be 0 for any. The computer name is the server-side name of the computer, if many computers have the same one, one of them will be selected. The app can be empty for a custom application, or can be \u201cHTTP\u201d, \u201cHTTPS\u201d, \u201cRDP\u201d, \u201cPuTTY\u201d or \u201cWinSCP\u201d. For the UDP protocol, no apps are currently supported so it should be left blank. For example you can use: -map:TCP:0: \"MyComputer\" :HTTP:80 -map:UDP:1235: \"MyComputer\" ::1234 The first example will map a random local port to port 80 of \u201cMyComputer\u201d and is expected for use with HTTP traffic. The second example maps local UDP port 1235 to port 1234 on \u201cMyComputer\u201d. It\u2019s best for the computer name to be in quotes. In addition to port mapping, you can also setup relay maps where a remote computer is used as a traffic relay like this: -relaymap:<protocol>:<localport>:<computername> :<app>:<remoteip>:<remoteport> This will relays a local port to thru the server and thru a remote agent to a target IP address and port. For example: -relaymap:TCP:555: \"MyComputer\" :HTTP:192.168.1.1:80 This will relay local port 555 to a 192.168.1.1:80 for HTTP traffic. A typical use of this is to be able to remotely configure a home router from anywhere on the Internet. -all The \u201call\u201d switch will bind local ports to all network interfaces so that other computers on the network can use the port maps provided by MeshCentral Router. By default, local ports will be bound to the loopback interface so that only local application can use the port mappings. -tray The \u201ctray\u201d switch will place MeshCentral Router on the Windows system tray instead of the normal application bar.","title":"Command Line Arguments"},{"location":"meshrouter/#conclusion","text":"MeshCentral, MeshCentral Router and this document are all opens source and licensed using Apache 2.0, the full license can be found at https://www.apache.org/licenses/LICENSE-2.0 .","title":"Conclusion"},{"location":"meshrouter/using_meshrouter_with_cookies/","text":"You can't use the MeshCentral Router (MCR) login dialog box to login to a server that uses SAML or OAuth. However, you can still use MCR Download MCR and run it. In the first dialog box, there will be an \"Install...\" button to setup MeshCentral router with the \"mcrouter://\" protocol in your system registry. Once done, close MCR. Now log into the web UI of your MeshCentral server. Go in the bottom of the \"My Devices\" tab, hit the \"Router\" link and hit \"Launch MeshCentral Router\". This will launch the router and connect directly to your server using a login cookie. The only drawback is you will have to manually load mappings saved in an .mcrouter file. When not using SAML, you can click on the .mcrouter file to load the mappings and MCR at the same time.","title":"Using meshrouter with cookies"}]}